/*
 * Copyright (c) 2015 Andrey “Limych” Khrolenok
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'

// read secret variables
// IMPORTANT: must be above `android {}` declaration
File secretPropsFile = file('../secret.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        safeLoad name as String, value
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude '.readme'
    }

    defaultConfig {
        applicationId "com.khrolenok.rates"
        minSdkVersion 16
        targetSdkVersion 22
        versionName VERSION
        versionCode getBuildVersion(1)
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            storeFile safeGetFile('STORE_FILE')
            storePassword safeGet('STORE_PASSWORD')
            keyAlias safeGet('KEY_ALIAS')
            keyPassword safeGet('KEY_PASSWORD', safeGet('STORE_PASSWORD'))
            // notice how STORE_PASSWORD is used as a fallback
        }
    }

    buildTypes {
        def BOOLEAN = "boolean"
        def TRUE = "true"
        def FALSE = "false"

        debug {
            buildConfigField BOOLEAN, "SHOW_ADS", TRUE
//            buildConfigField BOOLEAN, "SHOW_ADS", FALSE
            buildConfigField BOOLEAN, "STRICT_MODE", TRUE
//            buildConfigField BOOLEAN, "STRICT_MODE", FALSE
        }

        release {
            buildConfigField BOOLEAN, "SHOW_ADS", TRUE
            buildConfigField BOOLEAN, "STRICT_MODE", FALSE

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release as Object
            minifyEnabled true
            zipAlignEnabled true

            File releasesDir = new File(
                    safeGet('RELEASES_PARENT_DIR', '~/APKs'),
                    safeGet('FOLDER_NAME', project.group as String)
            )
            if (!releasesDir.exists())
                releasesDir.mkdirs()

            android.applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    if (output.name == "release") {
                        /* base file name in a form of:
                            [package]-[versionType]-[versionName]-[versionCode]
                            ex. com.meedamian.testApp-release-1.0.0-1111
                        */
                        String fileName = [
                                defaultConfig.applicationId,
                                project.name,
                                defaultConfig.versionName,
                                getBuildVersion(android.defaultConfig.versionCode, true)
                        ].join('-')

                        //If there's no ZipAlign task it means that our artifact will be unaligned and we need to mark it as such.
                        if (!output.zipAlign)
                            fileName = fileName + '-unaligned'

                        // rename output APK
                        output.outputFile = new File(releasesDir, fileName + '.apk')

                        // copy mappings.txt (JIC)
                        if (variant.getBuildType().isMinifyEnabled()) {

                            File mappingDir = new File(releasesDir, 'mappings')
                            if (!mappingDir.exists())
                                mappingDir.mkdirs()

                            assemble << {
                                copy {
                                    from variant.mappingFile
                                    into mappingDir
                                    rename('mapping.txt', "${fileName}-mapping.txt")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    productFlavors {
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.android.gms:play-services:7.8.0'
//    compile 'com.android.support:support-v4:21.0.+'
    compile 'com.android.support:appcompat-v7:22.+'
    compile 'com.android.support:cardview-v7:22.+'
    compile 'com.android.support:recyclerview-v7:22.+'
    compile 'com.android.support:design:22.+'
    compile 'co.trikita:log:1.1.5'
    compile 'uk.co.chrisjenx:calligraphy:2.0.2'
    compile 'com.nineoldandroids:library:2.4.0'     // Required for com.nhaarman.listviewanimations
    compile 'com.nhaarman.listviewanimations:lib-core:3.1.0@aar'
    compile 'com.nhaarman.listviewanimations:lib-manipulation:3.1.0@aar'
    compile 'me.drakeet.materialdialog:library:1.2.2'
//    compile 'com.github.navasmdc:MaterialDesign:1.5@aar'
//    compile 'com.github.PhilJay:MPAndroidChart:v2.1.3'
//    compile 'com.daimajia.easing:library:1.0.1@aar'
//    compile 'com.daimajia.androidanimations:library:1.1.3@aar'
}

// get variables && prevent crashing if missing
String safeGet(String name, String defaultValue = '') {
    hasProperty(name) ? project[name] : defaultValue
}

File safeGetFile(String name) {
    String fileName = safeGet(name, null)
    fileName != null ? file(fileName) : null
}

// loads variables from a file to `project` so they can be `safeGet`-ed later
def safeLoad(String name, Object value, Boolean override = false) {
    if (!hasProperty(name) || override)
        project.set name, value
}

Integer getBuildVersion(defaultVersion, Boolean increment = false) {
    File verFile = file('../version.properties')

    if (!verFile.canRead())
        verFile.createNewFile()

    Properties props = new Properties()

    props.load new FileInputStream(verFile)
    String currentCodeVersion = props['VERSION_CODE']

    if (currentCodeVersion == null)
        currentCodeVersion = defaultVersion ?: android.defaultConfig.versionCode

    if (increment) {
        Integer bumpedCodeVersion = currentCodeVersion.toInteger() + 1
        android.defaultConfig.versionCode = bumpedCodeVersion

        props['VERSION_CODE'] = bumpedCodeVersion.toString()

        props.store verFile.newWriter(), "Build version updated with each release build"
        currentCodeVersion = bumpedCodeVersion
    }

    currentCodeVersion as Integer
}
